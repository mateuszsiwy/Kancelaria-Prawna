CREATE OR REPLACE VIEW prawnicy_sprawy AS SELECT pr.id_prawnika, pr.imie, pr.nazwisko, s.id_sprawy, s.opis, s.data_zakonczenia, s.stopien_wynagrodzenia 
                FROM prawnik pr JOIN przypisane p ON pr.id_prawnika = p.id_prawnika
                    JOIN sprawa s on p.id_sprawy = s.id_sprawy;
                
                CREATE OR REPLACE FUNCTION on_delete_prawnik() RETURNS TRIGGER AS $$
                BEGIN
                    DELETE FROM przypisane WHERE id_prawnika = OLD.id_prawnika;
                    RETURN OLD;
                END;    
                $$ LANGUAGE plpgsql;
                
                CREATE TRIGGER on_delete_prawnik_trigger BEFORE delete ON prawnik
                FOR EACH ROW EXECUTE FUNCTION on_delete_prawnik();

                CREATE OR REPLACE FUNCTION on_delete_sprawa() RETURNS TRIGGER AS $$
                BEGIN
					DELETE FROM przypisane WHERE id_sprawy = OLD.id_sprawy;
					RETURN OLD;
				END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER on_delete_sprawa_trigger BEFORE delete ON sprawa
                FOR EACH ROW EXECUTE FUNCTION on_delete_sprawa();

                CREATE OR REPLACE VIEW prawnicy_zarobki AS 
                SELECT p.nazwisko, SUM(w.kwota::numeric) AS zarobki
                FROM prawnik p
                JOIN przypisane pr ON p.id_prawnika = pr.id_prawnika
                JOIN sprawa s ON pr.id_sprawy = s.id_sprawy
                JOIN wynagrodzenie w ON s.stopien_wynagrodzenia = w.stopien_wynagrodzenia
                GROUP BY p.nazwisko;



                
                ALTER TABLE Prawnik ADD CONSTRAINT check_imie CHECK (imie <> ' ');
                ALTER TABLE Prawnik ADD CONSTRAINT check_nazwisko CHECK (nazwisko <> ' ');
                ALTER TABLE Sprawa ADD CONSTRAINT check_opis (opis <> ' ');




                CREATE OR REPLACE VIEW KlienciFakturyPlatnosci AS
                SELECT 
                    k.id_klienta, 
                    k.imie, 
                    k.nazwisko, 
                    f.id_faktury, 
                    f.data_wystawienia, 
                    f.kwota AS kwota_faktury, 
                    f.status, 
                    p.id_platnosci, 
                    p.data_platnosci, 
                    p.kwota AS kwota_platnosci
                FROM 
                    Klient k
                JOIN 
                    Faktura f ON k.id_klienta = f.id_klienta
                LEFT JOIN 
                    Platnosc p ON f.id_faktury = p.id_faktury;

                CREATE OR REPLACE VIEW SprawyPrawnicy AS
                SELECT 
                    s.id_sprawy, 
                    s.opis, 
                    s.data_zakonczenia, 
                    p.id_prawnika, 
                    p.imie, 
                    p.nazwisko
                FROM 
                    Sprawa s
                JOIN 
                    Przypisane pr ON s.id_sprawy = pr.id_sprawy
                JOIN 
                    Prawnik p ON pr.id_prawnika = p.id_prawnika;

                CREATE OR REPLACE FUNCTION oblicz_calkowita_kwote_platnosci(id_klienta INT) RETURNS DECIMAL AS $$
                DECLARE
                    calkowita_kwota DECIMAL(10, 2);
                BEGIN
                    SELECT SUM(p.kwota) INTO calkowita_kwota
                    FROM Platnosc p
                    JOIN Faktura f ON p.id_faktury = f.id_faktury
                    WHERE f.id_klienta = id_klienta;
                    RETURN calkowita_kwota;
                END;
                $$ LANGUAGE plpgsql;

                CREATE OR REPLACE FUNCTION pobierz_sprawy_dla_prawnika(id_prawnika INT) RETURNS TABLE (
                    id_sprawy INT,
                    opis VARCHAR,
                    data_zakonczenia DATE
                ) AS $$
                BEGIN
                    RETURN QUERY
                    SELECT s.id_sprawy, s.opis, s.data_zakonczenia
                    FROM Sprawa s
                    JOIN Przypisane pr ON s.id_sprawy = pr.id_sprawy
                    WHERE pr.id_prawnika = id_prawnika;
                END;
                $$ LANGUAGE plpgsql;

                CREATE OR REPLACE FUNCTION aktualizuj_status_faktury() RETURNS TRIGGER AS $$
                BEGIN
                    UPDATE Faktura
                    SET status = 'Opłacona'
                    WHERE id_faktury = NEW.id_faktury AND NEW.kwota >= (SELECT kwota FROM Faktura WHERE id_faktury = NEW.id_faktury);
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER trigger_aktualizuj_status_faktury
                AFTER INSERT ON Platnosc
                FOR EACH ROW
                EXECUTE FUNCTION aktualizuj_status_faktury();

                CREATE OR REPLACE FUNCTION loguj_zmiany_sprawy() RETURNS TRIGGER AS $$
                BEGIN
                    INSERT INTO LogSprawa (id_sprawy, opis, data_zakonczenia, data_zmiany)
                    VALUES (NEW.id_sprawy, NEW.opis, NEW.data_zakonczenia, NOW());
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;
                
                CREATE TRIGGER trigger_loguj_zmiany_sprawy
                AFTER UPDATE ON Sprawa
                FOR EACH ROW
                EXECUTE FUNCTION loguj_zmiany_sprawy();

                INSERT INTO Klient (imie, nazwisko, email, telefon) VALUES
                ('Jan', 'Kowalski', 'jan.kowalski@example.com', '123456789'),
                ('Anna', 'Nowak', 'anna.nowak@example.com', '987654321');

                INSERT INTO Faktura (id_klienta, data_wystawienia, kwota, status) VALUES
                (1, '2023-01-01', 1000.00, 'Nieopłacona'),
                (2, '2023-02-01', 1500.00, 'Opłacona');

                INSERT INTO Platnosc (id_faktury, data_platnosci, kwota) VALUES
                (2, '2023-02-15', 1500.00);


                ALTER TABLE Sprawa
                ADD CONSTRAINT fk_sprawa_klient 
                FOREIGN KEY (id_klienta) 
                REFERENCES Klient(id_klienta);



                



-- Triggery i funkcje
                CREATE OR REPLACE FUNCTION check_lead_lawyer() RETURNS TRIGGER AS $$
                BEGIN
                    IF NEW.rola = 'Lead' AND EXISTS (
                        SELECT 1 FROM Przypisane 
                        WHERE id_sprawy = NEW.id_sprawy 
                        AND rola = 'Lead' 
                        AND id_przypisane != NEW.id_przypisane
                    ) THEN
                        RAISE EXCEPTION 'Może być tylko jeden Lead Prawnik na sprawę';
                    END IF;
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                DROP TRIGGER IF EXISTS enforce_one_lead ON Przypisane;
                CREATE TRIGGER enforce_one_lead
                BEFORE INSERT OR UPDATE ON Przypisane
                FOR EACH ROW EXECUTE FUNCTION check_lead_lawyer();
            
                -- Funkcja obliczająca koszt sprawy
                CREATE OR REPLACE FUNCTION oblicz_koszt_sprawy(sprawa_id INT) 
                RETURNS DECIMAL AS $$
                DECLARE
                    total_cost DECIMAL;
                BEGIN
                    SELECT SUM(cp.liczba_godzin * p.stawka_godzinowa)
                    INTO total_cost
                    FROM CzasPracy cp
                    JOIN Przypisane prz ON cp.id_przypisane = prz.id_przypisane
                    JOIN Prawnik p ON prz.id_prawnika = p.id_prawnika
                    WHERE prz.id_sprawy = sprawa_id;
                    
                    RETURN COALESCE(total_cost, 0);
                END;
                $$ LANGUAGE plpgsql;



                CREATE OR REPLACE VIEW PrawnicySprawyView AS
                SELECT 
                    p.id_prawnika,
                    p.imie,
                    p.nazwisko,
                    p.stanowisko,
                    s.id_sprawy,
                    s.tytul,
                    s.opis,
                    s.data_rozpoczecia,
                    s.data_zakonczenia,
                    s.status,
                    s.priorytet,
                    s.wynik,
                    pr.rola,
                    pr.data_przypisania
                FROM Prawnik p
                JOIN Przypisane pr ON p.id_prawnika = pr.id_prawnika
                JOIN Sprawa s ON pr.id_sprawy = s.id_sprawy;

                DROP Trigger if exists trigger_loguj_zmiany_sprawy on Sprawa;

                CREATE OR REPLACE FUNCTION oblicz_koszt_sprawy(sprawa_id INT) 
                RETURNS DECIMAL AS $$
                DECLARE
                    total_cost DECIMAL;
                BEGIN
                    SELECT SUM(cp.liczba_godzin * p.stawka_godzinowa)
                    INTO total_cost
                    FROM CzasPracy cp
                    JOIN Prawnik p ON cp.id_prawnika = p.id_prawnika
                    WHERE cp.id_sprawy = sprawa_id;
                    RETURN COALESCE(total_cost, 0);
                END;
                $$ LANGUAGE plpgsql;